apiVersion: v1
items:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      template: manageiq
    name: miq-orchestrator
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      template: manageiq
    name: miq-anyuid
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      template: manageiq
    name: miq-privileged
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      template: manageiq
    name: manageiq-secrets
  stringData:
    database-url: postgresql://root:b1tQdKPB@postgresql/vmdb_production?encoding=utf8&pool=5&wait_timeout=5
    pg-password: b1tQdKPB
    v2-key: uyu43Aph6WnQgOL7EDa5D3RWLp6wN2RCIpXFeLyO3p7
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      template: manageiq
    name: ansible-secrets
  stringData:
    admin-password: mQB4b77jfldMWcwEu0Pdfhfp4oQwoI6O
    rabbit-password: CqxGJT04U2FiVjKfTaD7pDROCyLtERbc
    secret-key: 87e84044675b36bc1870c1c3180be3d7
- apiVersion: v1
  data:
    01_miq_overrides.conf: |
      #------------------------------------------------------------------------------
      # CONNECTIONS AND AUTHENTICATION
      #------------------------------------------------------------------------------

      tcp_keepalives_count = 9
      tcp_keepalives_idle = 3
      tcp_keepalives_interval = 75

      #------------------------------------------------------------------------------
      # RESOURCE USAGE (except WAL)
      #------------------------------------------------------------------------------

      shared_preload_libraries = 'pglogical,repmgr_funcs'
      max_worker_processes = 10

      #------------------------------------------------------------------------------
      # WRITE AHEAD LOG
      #------------------------------------------------------------------------------

      wal_level = 'logical'
      wal_log_hints = on
      wal_buffers = 16MB
      checkpoint_completion_target = 0.9

      #------------------------------------------------------------------------------
      # REPLICATION
      #------------------------------------------------------------------------------

      max_wal_senders = 10
      wal_sender_timeout = 0
      max_replication_slots = 10
      hot_standby = on

      #------------------------------------------------------------------------------
      # ERROR REPORTING AND LOGGING
      #------------------------------------------------------------------------------

      log_filename = 'postgresql.log'
      log_rotation_age = 0
      log_min_duration_statement = 5000
      log_connections = on
      log_disconnections = on
      log_line_prefix = '%t:%r:%c:%u@%d:[%p]:'
      log_lock_waits = on

      #------------------------------------------------------------------------------
      # AUTOVACUUM PARAMETERS
      #------------------------------------------------------------------------------

      log_autovacuum_min_duration = 0
      autovacuum_naptime = 5min
      autovacuum_vacuum_threshold = 500
      autovacuum_analyze_threshold = 500
      autovacuum_vacuum_scale_factor = 0.05

      #------------------------------------------------------------------------------
      # LOCK MANAGEMENT
      #------------------------------------------------------------------------------

      deadlock_timeout = 5s

      #------------------------------------------------------------------------------
      # VERSION/PLATFORM COMPATIBILITY
      #------------------------------------------------------------------------------

      escape_string_warning = off
      standard_conforming_strings = off
  kind: ConfigMap
  metadata:
    labels:
      template: manageiq
    name: postgresql-configs
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances ManageIQ pods
      service.alpha.openshift.io/dependencies: '[{"name":"postgresql","namespace":"","kind":"Service"},{"name":"memcached","namespace":"","kind":"Service"}]'
    labels:
      template: manageiq
    name: manageiq
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    selector:
      name: manageiq
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      template: manageiq
    name: httpd
  spec:
    host: ""
    port:
      targetPort: https
    tls:
      termination: passthrough
    to:
      kind: Service
      name: httpd
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of the ManageIQ image changes
    labels:
      template: manageiq
    name: miq-app
  spec:
    dockerImageRepository: docker-registry.default.svc:5000/cfme/miq-app-frontend
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of the PostgreSQL image changes
    labels:
      template: manageiq
    name: postgresql
  spec:
    dockerImageRepository: docker.io/manageiq/postgresql
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of the Memcached image changes
    labels:
      template: manageiq
    name: memcached
  spec:
    dockerImageRepository: docker.io/manageiq/memcached
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of the Ansible image changes
    labels:
      template: manageiq
    name: ansible
  spec:
    dockerImageRepository: docker.io/manageiq/embedded-ansible
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      template: manageiq
    name: manageiq-postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 15Gi
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    annotations:
      description: Defines how to deploy the ManageIQ appliance
    labels:
      template: manageiq
    name: manageiq
  spec:
    replicas: "1"
    serviceName: manageiq
    template:
      metadata:
        labels:
          name: manageiq
        name: manageiq
      spec:
        containers:
        - env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: APPLICATION_INIT_DELAY
            value: "15"
          - name: DATABASE_SERVICE_NAME
            value: postgresql
          - name: DATABASE_REGION
            value: "0"
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                key: database-url
                name: manageiq-secrets
          - name: MEMCACHED_SERVER
            value: memcached:11211
          - name: MEMCACHED_SERVICE_NAME
            value: memcached
          - name: V2_KEY
            valueFrom:
              secretKeyRef:
                key: v2-key
                name: manageiq-secrets
          - name: ANSIBLE_SERVICE_NAME
            value: ansible
          - name: ANSIBLE_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: ansible-secrets
          image: docker-registry.default.svc:5000/cfme/miq-app-frontend:latest
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/manageiq/container-scripts/sync-pv-data
          livenessProbe:
            initialDelaySeconds: 480
            tcpSocket:
              port: 443
            timeoutSeconds: 3
          name: manageiq
          ports:
          - containerPort: 80
            protocol: TCP
          - containerPort: 443
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 200
            timeoutSeconds: 3
          resources:
            limits:
              memory: 16384Mi
            requests:
              cpu: 1000m
              memory: 6144Mi
          volumeMounts:
          - mountPath: /persistent
            name: manageiq-server
        serviceAccount: miq-orchestrator
        serviceAccountName: miq-orchestrator
        terminationGracePeriodSeconds: 90
    volumeClaimTemplates:
    - metadata:
        annotations: null
        name: manageiq-server
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Headless service for ManageIQ backend pods
    labels:
      template: manageiq
    name: manageiq-backend
  spec:
    clusterIP: None
    selector:
      name: manageiq-backend
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    annotations:
      description: Defines how to deploy the ManageIQ appliance
    labels:
      template: manageiq
    name: manageiq-backend
  spec:
    replicas: 0
    serviceName: manageiq-backend
    template:
      metadata:
        labels:
          name: manageiq-backend
        name: manageiq-backend
      spec:
        containers:
        - env:
          - name: APPLICATION_INIT_DELAY
            value: "15"
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                key: database-url
                name: manageiq-secrets
          - name: MIQ_SERVER_DEFAULT_ROLES
            value: database_operations,event,reporting,scheduler,smartstate,ems_operations,ems_inventory,automate
          - name: FRONTEND_SERVICE_NAME
            value: manageiq
          - name: MEMCACHED_SERVER
            value: memcached:11211
          - name: V2_KEY
            valueFrom:
              secretKeyRef:
                key: v2-key
                name: manageiq-secrets
          - name: ANSIBLE_SERVICE_NAME
            value: ansible
          - name: ANSIBLE_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: ansible-secrets
          image: docker-registry.default.svc:5000/cfme/miq-app-frontend:backend-latest
          lifecycle:
            preStop:
              exec:
                command:
                - /opt/manageiq/container-scripts/sync-pv-data
          livenessProbe:
            exec:
              command:
              - pidof
              - MIQ Server
            initialDelaySeconds: 480
            timeoutSeconds: 3
          name: manageiq
          resources:
            limits:
              memory: 16384Mi
            requests:
              cpu: 1000m
              memory: 6144Mi
          volumeMounts:
          - mountPath: /persistent
            name: manageiq-server
        serviceAccount: miq-orchestrator
        serviceAccountName: miq-orchestrator
        terminationGracePeriodSeconds: 90
    volumeClaimTemplates:
    - metadata:
        annotations: null
        name: manageiq-server
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the memcached server
    labels:
      template: manageiq
    name: memcached
  spec:
    ports:
    - name: memcached
      port: 11211
      targetPort: 11211
    selector:
      name: memcached
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy memcached
    labels:
      template: manageiq
    name: memcached
  spec:
    replicas: 1
    selector:
      name: memcached
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: memcached
        name: memcached
      spec:
        containers:
        - env:
          - name: MEMCACHED_MAX_MEMORY
            value: "64"
          - name: MEMCACHED_MAX_CONNECTIONS
            value: "1024"
          - name: MEMCACHED_SLAB_PAGE_SIZE
            value: 1m
          image: docker.io/manageiq/memcached:latest
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 11211
            timeoutSeconds: 1
          name: memcached
          ports:
          - containerPort: 11211
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 11211
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 64Mi
          volumeMounts: []
        volumes: []
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - memcached
        from:
          kind: ImageStreamTag
          name: memcached:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    labels:
      template: manageiq
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: postgresql
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
    labels:
      template: manageiq
    name: postgresql
  spec:
    replicas: 1
    selector:
      name: postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: postgresql
        name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: root
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: pg-password
                name: manageiq-secrets
          - name: POSTGRESQL_DATABASE
            value: vmdb_production
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: "1000"
          - name: POSTGRESQL_SHARED_BUFFERS
            value: 1GB
          - name: POSTGRESQL_CONFIG_DIR
            value: /var/lib/pgsql/conf.d
          image: docker.io/manageiq/postgresql:latest
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE}
                -c 'SELECT 1'
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              memory: 8Gi
            requests:
              cpu: 500m
              memory: 4Gi
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: miq-pgdb-volume
          - mountPath: /var/lib/pgsql/conf.d
            name: miq-pg-configs
        volumes:
        - name: miq-pgdb-volume
          persistentVolumeClaim:
            claimName: manageiq-postgresql
        - configMap:
            name: postgresql-configs
          name: miq-pg-configs
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances Ansible pods
      service.alpha.openshift.io/dependencies: '[{"name":"postgresql","namespace":"","kind":"Service"}]'
    labels:
      template: manageiq
    name: ansible
  spec:
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    selector:
      name: ansible
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the Ansible appliance
    labels:
      template: manageiq
    name: manageiq-ansible
  spec:
    replicas: 0
    serviceName: ansible
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ansible
        name: ansible
      spec:
        containers:
        - env:
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: ansible-secrets
          - name: RABBITMQ_USER_NAME
            value: ansible
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                key: rabbit-password
                name: ansible-secrets
          - name: ANSIBLE_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secret-key
                name: ansible-secrets
          - name: DATABASE_SERVICE_NAME
            value: postgresql
          - name: POSTGRESQL_USER
            value: root
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: pg-password
                name: manageiq-secrets
          - name: POSTGRESQL_DATABASE
            value: awx
          image: docker.io/manageiq/embedded-ansible:latest
          livenessProbe:
            initialDelaySeconds: 480
            tcpSocket:
              port: 443
            timeoutSeconds: 3
          name: miq-ansible
          ports:
          - containerPort: 80
            protocol: TCP
          - containerPort: 443
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 200
            timeoutSeconds: 3
          resources:
            limits:
              memory: 8096Mi
            requests:
              cpu: 1000m
              memory: 2048Mi
          securityContext:
            privileged: true
        serviceAccount: miq-privileged
        serviceAccountName: miq-privileged
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of the httpd image changes
    labels:
      template: manageiq
    name: httpd
  spec:
    dockerImageRepository: docker.io/manageiq/httpd
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the httpd server
      service.alpha.openshift.io/dependencies: '[{"name":"manageiq","namespace":"","kind":"Service"}]'
    labels:
      template: manageiq
    name: httpd
  spec:
    ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
    selector:
      name: httpd
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy httpd
    labels:
      template: manageiq
    name: httpd
  spec:
    replicas: 1
    selector:
      name: httpd
    strategy:
      recreateParams:
        timeoutSeconds: 1200
      type: Recreate
    template:
      metadata:
        labels:
          name: httpd
        name: httpd
      spec:
        containers:
        - env:
          - name: MANAGEIQ_SERVICE_NAME
            value: manageiq
          image: docker.io/manageiq/httpd:latest
          livenessProbe:
            initialDelaySeconds: 15
            tcpSocket:
              port: 443
            timeoutSeconds: 3
          name: httpd
          ports:
          - containerPort: 80
          - containerPort: 443
          readinessProbe:
            httpGet:
              path: /
              port: 443
              scheme: HTTPS
            initialDelaySeconds: 10
            timeoutSeconds: 3
          resources:
            limits:
              memory: 8192Mi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts: []
        serviceAccount: miq-anyuid
        serviceAccountName: miq-anyuid
        volumes: []
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - httpd
        from:
          kind: ImageStreamTag
          name: httpd:latest
      type: ImageChange
    - type: ConfigChange
kind: List
metadata: {}